import { useState, useCallback } from 'react'
import { AIAnalysisState } from '@/types/audio'
import { summarizeText, generateScript } from '@/utils/api'

export const useAIAnalysis = () => {
  const [aiAnalysisState, setAiAnalysisState] = useState<AIAnalysisState>({
    summary: "",
    isSummarizing: false,
    summaryError: "",
    script: "",
    isGeneratingScript: false,
    scriptError: ""
  })

  // ÌÖçÏä§Ìä∏Î•º ÏöîÏïΩÌïòÎäî Ìï®Ïàò - Í∞ÑÎã®ÌïòÍ≤å ÏàòÏ†ï
  const summarizeTextContent = useCallback(async (text: string) => {
    if (!text.trim() || text.trim().length < 10) {
      console.log('ÌÖçÏä§Ìä∏Í∞Ä ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§:', text.trim().length, 'Ïûê')
      return null
    }
    
    console.log('üìù ÏöîÏïΩ ÏãúÏûë:', text.substring(0, 50) + '...')
    
    setAiAnalysisState(prev => ({
      ...prev, 
      isSummarizing: true, 
      summaryError: ""
    }))
    
    try {
      const result = await summarizeText(text)
      
      if (result.success && result.summary) {
        console.log('‚úÖ ÏöîÏïΩ ÏôÑÎ£å:', result.summary)
        
        setAiAnalysisState(prev => ({
          ...prev, 
          summary: result.summary || "",
          isSummarizing: false 
        }))
        
        return result.summary
      } else {
        throw new Error(result.error || 'ÏöîÏïΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('‚ùå ÏöîÏïΩ Ïò§Î•ò:', error)
      
      const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
      
      setAiAnalysisState(prev => ({
        ...prev, 
        summaryError: errorMessage,
        isSummarizing: false 
      }))
      
      return null
    }
  }, [])

  // Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
  const generateScriptContent = useCallback(async (text: string) => {
    console.log('üìÑ === generateScriptContent ÏãúÏûë ===')
    console.log('Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±Ìï† ÌÖçÏä§Ìä∏:', text.substring(0, 100) + '...')
    console.log('ÌÖçÏä§Ìä∏ Í∏∏Ïù¥:', text.trim().length, 'Ïûê')
    
    if (!text.trim()) {
      console.log('‚ùå ÌÖçÏä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏñ¥ÏÑú Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Í±¥ÎÑàÎúÄ')
      return null
    }
    
    setAiAnalysisState(prev => ({ 
      ...prev, 
      isGeneratingScript: true, 
      scriptError: "" 
    }))
    
    try {
      console.log('üì° Ïä§ÌÅ¨Î¶ΩÌä∏ API Ìò∏Ï∂ú ÏãúÏûë...')
      const result = await generateScript(text)
      console.log('üì° Ïä§ÌÅ¨Î¶ΩÌä∏ API ÏùëÎãµ:', result)
      
      if (result.success && result.script) {
        console.log('‚úÖ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å:', result.script.substring(0, 100) + '...')
        console.log('Ïä§ÌÅ¨Î¶ΩÌä∏ Í∏∏Ïù¥:', result.script.length, 'Ïûê')
        setAiAnalysisState(prev => ({ 
          ...prev, 
          script: result.script || "",
          isGeneratingScript: false 
        }))
        return result.script
      } else {
        console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Ïã§Ìå®:', result.error)
        throw new Error(result.error || 'Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Ïò§Î•ò:', error)
      setAiAnalysisState(prev => ({ 
        ...prev, 
        scriptError: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        isGeneratingScript: false 
      }))
      return null
    }
  }, [])

  // ÏöîÏïΩÍ≥º Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÎèôÏãúÏóê ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
  const generateSummaryAndScript = useCallback(async (text: string) => {
    console.log('üöÄ generateSummaryAndScript Ìò∏Ï∂úÎê®:', {
      textLength: text?.trim().length,
      textPreview: text?.substring(0, 50) + '...'
    })
    
    if (!text.trim() || text.trim().length < 10) {
      console.log('ÌÖçÏä§Ìä∏Í∞Ä ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§:', text.trim().length, 'Ïûê')
      return
    }
    
    console.log('üöÄ ÏöîÏïΩ Î∞è Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏãúÏûë:', text.substring(0, 50) + '...')
    
    try {
      // ÏöîÏïΩ ÏÉùÏÑ±
      console.log('üìù ÏöîÏïΩ ÏÉùÏÑ± ÏãúÏûë...')
      const summaryResult = await summarizeTextContent(text)
      console.log('‚úÖ ÏöîÏïΩ ÏÉùÏÑ± ÏôÑÎ£å:', summaryResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®')
      
      // Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
      console.log('üìÑ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏãúÏûë...')
      const scriptResult = await generateScriptContent(text)
      console.log('‚úÖ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å:', scriptResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®')
      
      console.log('üéâ ÏöîÏïΩ Î∞è Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å')
    } catch (error) {
      console.error('‚ùå ÏöîÏïΩ Î∞è Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Ïò§Î•ò:', error)
    }
  }, [summarizeTextContent, generateScriptContent])

  // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
  const resetAIAnalysis = useCallback(() => {
    setAiAnalysisState({
      summary: "",
      isSummarizing: false,
      summaryError: "",
      script: "",
      isGeneratingScript: false,
      scriptError: ""
    })
  }, [])

  return {
    aiAnalysisState,
    summarizeTextContent,
    generateScriptContent,
    generateSummaryAndScript,
    resetAIAnalysis
  }
} 